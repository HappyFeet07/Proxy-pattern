/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TransparentUpgradeabilityProxy,
  TransparentUpgradeabilityProxyInterface,
} from "../TransparentUpgradeabilityProxy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "TransferProxyAdmin",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeProxyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImpl",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImpl",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100203361002560201b60201c565b610051565b60007fb361eaf08109ac4e837850c52399e285128fdaa6c1699e4864dd655f97ca6fd890508181555050565b6108d3806100606000396000f3fe60806040526004361061004e5760003560e01c80633659cfe61461005f5780635c60da1b146100885780636e9960c3146100b35780639f712f2f146100de578063d4f0cecf1461010757610055565b3661005557005b61005d610123565b005b34801561006b57600080fd5b5061008660048036038101906100819190610583565b610190565b005b34801561009457600080fd5b5061009d6101e5565b6040516100aa91906106d7565b60405180910390f35b3480156100bf57600080fd5b506100c8610213565b6040516100d591906106d7565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610583565b610222565b005b610121600480360381019061011c91906105ac565b6102b0565b005b600061012d6101e5565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561016957600080fd5b60405136600082376000803683855af43d806000843e816000811461018c578184f35b8184fd5b610198610213565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101d9576101d4816103b5565b6101e2565b6101e1610123565b5b50565b6000807f24ed44ee9374370fd3aa7c8b1abf58827504c20f65246b17d2b9e7e1aef778479050805491505090565b600061021d610480565b905090565b61022a610213565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102a457610266816104ae565b7ff9668cbdaff8d87f16597f33c9d90a38cef9d416d5a417fc5dc49bb640a3668a33826040516102979291906106f2565b60405180910390a16102ad565b6102ac610123565b5b50565b6102b8610213565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156103a8576102f4826103b5565b60003073ffffffffffffffffffffffffffffffffffffffff16348360405161031c91906106c0565b60006040518083038185875af1925050503d8060008114610359576040519150601f19603f3d011682016040523d82523d6000602084013e61035e565b606091505b50509050806103a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103999061071b565b60405180910390fd5b506103b1565b6103b0610123565b5b5050565b60006103bf6101e5565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610430576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104279061073b565b60405180910390fd5b610439826104da565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25050565b6000807fb361eaf08109ac4e837850c52399e285128fdaa6c1699e4864dd655f97ca6fd89050805491505090565b60007fb361eaf08109ac4e837850c52399e285128fdaa6c1699e4864dd655f97ca6fd890508181555050565b60007f24ed44ee9374370fd3aa7c8b1abf58827504c20f65246b17d2b9e7e1aef7784790508181555050565b60006105196105148461078c565b61075b565b90508281526020810184848401111561053157600080fd5b61053c848285610815565b509392505050565b60008135905061055381610886565b92915050565b600082601f83011261056a57600080fd5b813561057a848260208601610506565b91505092915050565b60006020828403121561059557600080fd5b60006105a384828501610544565b91505092915050565b600080604083850312156105bf57600080fd5b60006105cd85828601610544565b925050602083013567ffffffffffffffff8111156105ea57600080fd5b6105f685828601610559565b9150509250929050565b610609816107e3565b82525050565b600061061a826107bc565b61062481856107c7565b9350610634818560208601610824565b80840191505092915050565b600061064d6014836107d2565b91507f75706772616465546f43616c6c204661696c65640000000000000000000000006000830152602082019050919050565b600061068d6011836107d2565b91507f4475706c696361746520757067726164650000000000000000000000000000006000830152602082019050919050565b60006106cc828461060f565b915081905092915050565b60006020820190506106ec6000830184610600565b92915050565b60006040820190506107076000830185610600565b6107146020830184610600565b9392505050565b6000602082019050818103600083015261073481610640565b9050919050565b6000602082019050818103600083015261075481610680565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561078257610781610857565b5b8060405250919050565b600067ffffffffffffffff8211156107a7576107a6610857565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006107ee826107f5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610842578082015181840152602081019050610827565b83811115610851576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61088f816107e3565b811461089a57600080fd5b5056fea26469706673582212208217fce9555426263c878875d6b81af6d3bb0bf64beadfc0112f4bd7ec61a14d64736f6c63430008000033";

type TransparentUpgradeabilityProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransparentUpgradeabilityProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransparentUpgradeabilityProxy__factory extends ContractFactory {
  constructor(...args: TransparentUpgradeabilityProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TransparentUpgradeabilityProxy> {
    return super.deploy(
      overrides || {}
    ) as Promise<TransparentUpgradeabilityProxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TransparentUpgradeabilityProxy {
    return super.attach(address) as TransparentUpgradeabilityProxy;
  }
  connect(signer: Signer): TransparentUpgradeabilityProxy__factory {
    return super.connect(signer) as TransparentUpgradeabilityProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransparentUpgradeabilityProxyInterface {
    return new utils.Interface(_abi) as TransparentUpgradeabilityProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransparentUpgradeabilityProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TransparentUpgradeabilityProxy;
  }
}
