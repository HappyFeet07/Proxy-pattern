/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Proxiable, ProxiableInterface } from "../Proxiable";

const _abi = [
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806352d1902d14602d575b600080fd5b60336047565b604051603e9190607f565b60405180910390f35b60007fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf760001b905090565b6079816098565b82525050565b6000602082019050609260008301846072565b92915050565b600081905091905056fea2646970667358221220aaa884be0c7d1e6dcf5381cbca4b99c33749f776f80ecb87cff48dfccd9fc8ab64736f6c63430008000033";

type ProxiableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxiableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxiable__factory extends ContractFactory {
  constructor(...args: ProxiableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Proxiable> {
    return super.deploy(overrides || {}) as Promise<Proxiable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Proxiable {
    return super.attach(address) as Proxiable;
  }
  connect(signer: Signer): Proxiable__factory {
    return super.connect(signer) as Proxiable__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxiableInterface {
    return new utils.Interface(_abi) as ProxiableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Proxiable {
    return new Contract(address, _abi, signerOrProvider) as Proxiable;
  }
}
