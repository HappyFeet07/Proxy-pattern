/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Proxy, ProxyInterface } from "../Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "constructData",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "contractLogic",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161044838038061044883398181016040528101906100329190610185565b807fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf75560008173ffffffffffffffffffffffffffffffffffffffff168360405161007c919061024a565b600060405180830381855af49150503d80600081146100b7576040519150601f19603f3d011682016040523d82523d6000602084013e6100bc565b606091505b5050905080610100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f790610261565b60405180910390fd5b5050506103b4565b600061011b610116846102b2565b610281565b90508281526020810184848401111561013357600080fd5b61013e84828561033b565b509392505050565b6000815190506101558161039d565b92915050565b600082601f83011261016c57600080fd5b815161017c848260208601610108565b91505092915050565b6000806040838503121561019857600080fd5b600083015167ffffffffffffffff8111156101b257600080fd5b6101be8582860161015b565b92505060206101cf85828601610146565b9150509250929050565b60006101e4826102e2565b6101ee81856102ed565b93506101fe81856020860161033b565b80840191505092915050565b60006102176013836102f8565b91507f436f6e737472756374696f6e206661696c6564000000000000000000000000006000830152602082019050919050565b600061025682846101d9565b915081905092915050565b6000602082019050818103600083015261027a8161020a565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156102a8576102a761036e565b5b8060405250919050565b600067ffffffffffffffff8211156102cd576102cc61036e565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006103148261031b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b8381101561035957808201518184015260208101905061033e565b83811115610368576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103a681610309565b81146103b157600080fd5b50565b6086806103c26000396000f3fe60806040527fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7543660008037600080366000846127105a03f43d806000803e8160008114604b57816000f35b816000fdfea2646970667358221220abe4ac1a40e5c6de770bdb07de734ce007a537be515488ec73a54ccc55eed6ce64736f6c63430008000033";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    constructData: BytesLike,
    contractLogic: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Proxy> {
    return super.deploy(
      constructData,
      contractLogic,
      overrides || {}
    ) as Promise<Proxy>;
  }
  getDeployTransaction(
    constructData: BytesLike,
    contractLogic: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      constructData,
      contractLogic,
      overrides || {}
    );
  }
  attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  connect(signer: Signer): Proxy__factory {
    return super.connect(signer) as Proxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new utils.Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}
