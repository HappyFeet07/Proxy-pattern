/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LogicV1, LogicV1Interface } from "../LogicV1";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "ret",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
    ],
    name: "updateCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061081e806100206000396000f3fe6080604052600436106100705760003560e01c806370a082311161004e57806370a08231146100f45780638129fc1c146101315780638da5cb5b14610148578063d0e30db01461017357610070565b8063158ef93e1461007557806346951954146100a057806352d1902d146100c9575b600080fd5b34801561008157600080fd5b5061008a61017d565b6040516100979190610641565b60405180910390f35b3480156100ac57600080fd5b506100c760048036038101906100c291906104c9565b610190565b005b3480156100d557600080fd5b506100de6101f2565b6040516100eb919061065c565b60405180910390f35b34801561010057600080fd5b5061011b600480360381019061011691906104c9565b61021d565b60405161012891906106b7565b60405180910390f35b34801561013d57600080fd5b50610146610265565b005b34801561015457600080fd5b5061015d61026f565b60405161016a91906105fd565b60405180910390f35b61017b610295565b005b600160149054906101000a900460ff1681565b60011515600160149054906101000a900460ff161515146101e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101dd90610697565b60405180910390fd5b6101ef8161037b565b50565b60007fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf760001b905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61026d610483565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60011515600160149054906101000a900460ff161515146102eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e290610697565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461033991906106e3565b925050819055507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051610371929190610618565b60405180910390a1565b8073ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103c157600080fd5b505afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f991906104f2565b7fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf760001b1461045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045490610677565b60405180910390fd5b807fc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf75550565b60018060146101000a81548160ff021916908315150217905550565b6000813590506104ae816107ba565b92915050565b6000815190506104c3816107d1565b92915050565b6000602082840312156104db57600080fd5b60006104e98482850161049f565b91505092915050565b60006020828403121561050457600080fd5b6000610512848285016104b4565b91505092915050565b61052481610739565b82525050565b6105338161074b565b82525050565b61054281610757565b82525050565b6000610555600e836106d2565b91507f4e6f7420636f6d70617469626c650000000000000000000000000000000000006000830152602082019050919050565b60006105956032836106d2565b91507f546865206c696272617279206973206c6f636b65642e204e6f2064697265637460008301527f202763616c6c2720697320616c6c6f77656400000000000000000000000000006020830152604082019050919050565b6105f781610781565b82525050565b6000602082019050610612600083018461051b565b92915050565b600060408201905061062d600083018561051b565b61063a60208301846105ee565b9392505050565b6000602082019050610656600083018461052a565b92915050565b60006020820190506106716000830184610539565b92915050565b6000602082019050818103600083015261069081610548565b9050919050565b600060208201905081810360008301526106b081610588565b9050919050565b60006020820190506106cc60008301846105ee565b92915050565b600082825260208201905092915050565b60006106ee82610781565b91506106f983610781565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561072e5761072d61078b565b5b828201905092915050565b600061074482610761565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6107c381610739565b81146107ce57600080fd5b50565b6107da81610757565b81146107e557600080fd5b5056fea2646970667358221220cd491cf30660145a2f8783f4489eb966d58d085ee65e667d7558493798ce8ba364736f6c63430008000033";

type LogicV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LogicV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LogicV1__factory extends ContractFactory {
  constructor(...args: LogicV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LogicV1> {
    return super.deploy(overrides || {}) as Promise<LogicV1>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LogicV1 {
    return super.attach(address) as LogicV1;
  }
  connect(signer: Signer): LogicV1__factory {
    return super.connect(signer) as LogicV1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LogicV1Interface {
    return new utils.Interface(_abi) as LogicV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LogicV1 {
    return new Contract(address, _abi, signerOrProvider) as LogicV1;
  }
}
