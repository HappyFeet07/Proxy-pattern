/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DataLayout, DataLayoutInterface } from "../DataLayout";

const _abi = [
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f98061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638da5cb5b14602d575b600080fd5b60336047565b604051603e9190607a565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6074816093565b82525050565b6000602082019050608d6000830184606d565b92915050565b6000609c8260a3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff8216905091905056fea2646970667358221220e35774a3163e9b244c870461cc66135decb2eca0940c8a727738250ef092539064736f6c63430008000033";

type DataLayoutConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataLayoutConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataLayout__factory extends ContractFactory {
  constructor(...args: DataLayoutConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DataLayout> {
    return super.deploy(overrides || {}) as Promise<DataLayout>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DataLayout {
    return super.attach(address) as DataLayout;
  }
  connect(signer: Signer): DataLayout__factory {
    return super.connect(signer) as DataLayout__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataLayoutInterface {
    return new utils.Interface(_abi) as DataLayoutInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataLayout {
    return new Contract(address, _abi, signerOrProvider) as DataLayout;
  }
}
